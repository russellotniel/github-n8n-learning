# .github/workflows/release.yml
name: Release (beta on main, prod on release)

on:
  push:
    branches: [ main, release ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    name: Plan next version
    runs-on: ubuntu-latest
    outputs:
      next_tag:   ${{ steps.decide.outputs.new_tag }}
      prerelease: ${{ steps.decide.outputs.prerelease }}
      has_tag:    ${{ steps.decide.outputs.has_tag }}
    steps:
      - uses: actions/checkout@v4

      # Ask the action what it would do (still useful as a fallback)
      - id: plan
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pre_release_branches: main
          release_branches: release
          append_to_pre_release_tag: beta
          default_prerelease_bump: preminor
          tag_prefix: 'v'
          dry_run: true

      # Decide the exact tag we want:
      # - on main: if the latest tag is already a beta, bump its counter
      # - on release: if there is a merged beta tag, drop the suffix and publish that base
      # - otherwise: fall back to the action's planned tag
      - id: decide
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force

          BRANCH="${{ github.ref_name }}"
          PLANNED="${{ steps.plan.outputs.new_tag }}"
          NEW_TAG=""
          PRERELEASE="false"
          HAS="false"

          # Helper: highest tag by semver among tags merged into HEAD
          latest_merged_tag() {
            git tag --merged HEAD --list "$1" --sort=-v:refname | head -n1 || true
          }

          if [[ "$BRANCH" == "main" ]]; then
            # If we're already on a beta line, force bump the beta counter
            LAST_BETA="$(latest_merged_tag 'v[0-9]*-beta.*')"
            if [[ "$LAST_BETA" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)-beta\.([0-9]+)$ ]]; then
              base="${BASH_REMATCH[1]}"; n="${BASH_REMATCH[2]}"
              NEW_TAG="v${base}-beta.$((n+1))"
              PRERELEASE="true"; HAS="true"
            else
              NEW_TAG="$PLANNED"
              [[ -n "$NEW_TAG" ]] && HAS="true"
              [[ "$NEW_TAG" == *"-beta."* ]] && PRERELEASE="true"
            fi

          elif [[ "$BRANCH" == "release" ]]; then
            # Promote the HIGHEST merged beta to a final by dropping -beta.N
            LAST_BETA="$(latest_merged_tag 'v[0-9]*-beta.*')"
            if [[ "$LAST_BETA" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)-beta\.[0-9]+$ ]]; then
              base="${BASH_REMATCH[1]}"
              NEW_TAG="v${base}"
              PRERELEASE="false"; HAS="true"
            else
              # No beta found â†’ allow normal behavior (e.g., direct hotfix to release)
              NEW_TAG="$PLANNED"
              [[ -n "$NEW_TAG" ]] && HAS="true"
              [[ "$NEW_TAG" == *"-beta."* ]] && PRERELEASE="true" || PRERELEASE="false"
            fi
          else
            # Shouldn't happen (we only trigger on main/release), but be safe
            NEW_TAG="$PLANNED"
            [[ -n "$NEW_TAG" ]] && HAS="true"
            [[ "$NEW_TAG" == *"-beta."* ]] && PRERELEASE="true"
          fi

          echo "new_tag=$NEW_TAG"       >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"
          echo "has_tag=$HAS"           >> "$GITHUB_OUTPUT"

  build:
    name: Build (no publish)
    needs: plan
    if: needs.plan.outputs.has_tag == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  finalize:
    name: Tag, Release & Push
    needs: [plan, build]
    if: needs.plan.outputs.has_tag == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Create exactly the tag we decided (custom_tag already includes 'v')
      - id: tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pre_release_branches: main
          release_branches: release
          append_to_pre_release_tag: beta
          default_prerelease_bump: preminor
          tag_prefix: ''                          # avoid double 'v'
          custom_tag: ${{ needs.plan.outputs.next_tag }}

      - name: Stop if tag wasn't created
        if: ${{ steps.tag.outputs.new_tag == '' }}
        run: echo "No new tag. Exiting." && exit 0

      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag:  ${{ steps.tag.outputs.new_tag }}
          name: Release ${{ steps.tag.outputs.new_tag }}
          body: ${{ steps.tag.outputs.changelog }}
          prerelease: ${{ needs.plan.outputs.prerelease }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3

      - name: Build & push Docker image (single tag)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: russellotniel/personal-repository:${{ steps.tag.outputs.new_tag }}
