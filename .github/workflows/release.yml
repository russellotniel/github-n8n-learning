# .github/workflows/release.yml
name: Release (beta on main, prod on release)

on:
  push:
    branches: [ main, release ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  plan:
    name: Plan next version
    runs-on: ubuntu-latest
    outputs:
      next_tag:   ${{ steps.decide.outputs.new_tag }}
      prerelease: ${{ steps.decide.outputs.prerelease }}
      has_tag:    ${{ steps.decide.outputs.has_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Ask the action what it would do (fallback)
      - id: plan
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pre_release_branches: main
          release_branches: release
          append_to_pre_release_tag: beta
          default_prerelease_bump: preminor
          tag_prefix: 'v'
          dry_run: true

      # Decide exact tag:
      # - main: if last merged tag is beta and NO final tag with same base exists anywhere, bump beta.N → N+1
      #         otherwise start a new cycle from the planner (prepatch/preminor/etc.)
      # - release: if a merged beta exists, drop -beta.N; else use planner (for direct hotfixes)
      - id: decide
        shell: bash
        run: |
          set -euo pipefail
          git fetch --tags --force

          BRANCH="${{ github.ref_name }}"
          PLANNED="${{ steps.plan.outputs.new_tag }}"
          NEW_TAG="" PRERELEASE="false" HAS="false"

          latest_merged_tag() {
            git tag --merged HEAD --list "$1" --sort=-v:refname | head -n1 || true
          }

          if [[ "$BRANCH" == "main" ]]; then
            LAST_BETA="$(latest_merged_tag 'v[0-9]*-beta.*')"
            echo "main: last merged beta: ${LAST_BETA:-<none>}"
            if [[ "$LAST_BETA" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)-beta\.([0-9]+)$ ]]; then
              base="${BASH_REMATCH[1]}"; n="${BASH_REMATCH[2]}"
              
              # For one-way flow: Check if production tag exists AND is merged into main
              # If production exists but not merged into main, continue the beta series
              if git tag --merged HEAD --list "v${base}" | grep -q . ; then
                echo "main: final v${base} is merged into main → start new cycle from planner"
                NEW_TAG="$PLANNED"
                [[ -n "$NEW_TAG" ]] && HAS="true"
                [[ "$NEW_TAG" == *"-beta."* ]] && PRERELEASE="true" || PRERELEASE="false"
              else
                echo "main: v${base} exists elsewhere but not merged here → continue beta series"
                NEW_TAG="v${base}-beta.$((n+1))"
                PRERELEASE="true"; HAS="true"
              fi
            else
              NEW_TAG="$PLANNED"
              [[ -n "$NEW_TAG" ]] && HAS="true"
              [[ "$NEW_TAG" == *"-beta."* ]] && PRERELEASE="true"
            fi

          elif [[ "$BRANCH" == "release" ]]; then
            LAST_BETA="$(latest_merged_tag 'v[0-9]*-beta.*')"
            echo "release: last merged beta: ${LAST_BETA:-<none>}"
            if [[ "$LAST_BETA" =~ ^v([0-9]+\.[0-9]+\.[0-9]+)-beta\.[0-9]+$ ]]; then
              base="${BASH_REMATCH[1]}"
              NEW_TAG="v${base}"
              PRERELEASE="false"; HAS="true"
            else
              NEW_TAG="$PLANNED"
              [[ -n "$NEW_TAG" ]] && HAS="true"
              [[ "$NEW_TAG" == *"-beta."* ]] && PRERELEASE="true" || PRERELEASE="false"
            fi
          else
            NEW_TAG="$PLANNED"
            [[ -n "$NEW_TAG" ]] && HAS="true"
            [[ "$NEW_TAG" == *"-beta."* ]] && PRERELEASE="true"
          fi

          echo "Planned: ${PLANNED:-<none>}"
          echo "Decided: ${NEW_TAG:-<none>} (prerelease=${PRERELEASE})"
          echo "new_tag=$NEW_TAG"       >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"
          echo "has_tag=$HAS"           >> "$GITHUB_OUTPUT"

  build:
    name: Build (no publish)
    needs: plan
    if: needs.plan.outputs.has_tag == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  finalize:
    name: Tag, Release & Push
    needs: [plan, build]
    if: needs.plan.outputs.has_tag == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - id: tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pre_release_branches: main
          release_branches: release
          append_to_pre_release_tag: beta
          default_prerelease_bump: preminor
          tag_prefix: ''                  # custom_tag already has 'v'
          custom_tag: ${{ needs.plan.outputs.next_tag }}

      - name: Stop if tag wasn't created
        if: ${{ steps.tag.outputs.new_tag == '' }}
        run: echo "No new tag. Exiting." && exit 0

      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag:  ${{ steps.tag.outputs.new_tag }}
          name: Release ${{ steps.tag.outputs.new_tag }}
          body: ${{ steps.tag.outputs.changelog }}
          prerelease: ${{ needs.plan.outputs.prerelease }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v3

      - name: Build & push Docker image (single tag)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: russellotniel/personal-repository:${{ steps.tag.outputs.new_tag }}
      
      # Post-deployment verification
      - name: Verify deployment
        run: |
          echo "Deployment completed for tag: ${{ steps.tag.outputs.new_tag }}"
          echo "Docker image: russellotniel/personal-repository:${{ steps.tag.outputs.new_tag }}"
          # Add health check commands here when you have a deployed service
          # curl -f https://your-app.com/health || exit 1
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Deployment successful for ${{ steps.tag.outputs.new_tag }}"
          else
            echo "❌ Deployment failed for ${{ steps.tag.outputs.new_tag }}"
          fi